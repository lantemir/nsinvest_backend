# from django.shortcuts import render
from django.contrib.auth.models import User
from rest_framework import generics
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.exceptions import AuthenticationFailed
from rest_framework_simplejwt.tokens import RefreshToken

from .models import ChatRoom,EmailVerificationCode
from .serializers import ChatRoomSerializer, UserSerializer

from .models import ImageModel
from rest_framework.views import APIView
from django.shortcuts import get_object_or_404
from django.http import HttpResponse
from django.contrib.auth.hashers import make_password
import random
from rest_framework.exceptions import ValidationError
from django.core.mail import send_mail, BadHeaderError
import logging
from smtplib import SMTPException
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from .tasks import send_verification_email
from.serializers import CustomTokenObtainPairSerializer
from django.conf import settings






# class ChatRoomListCreateView(generics.ListCreateAPIView):
#     queryset = ChatRoom.objects.all()
#     serializer_class = ChatRoomSerializer
#     permission_classes = [IsAuthenticated]  # –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
#     print("ChatRoomListCreateView@@@")

# class MessageListCreateView(generics.ListCreateAPIView):
#     queryset = Message.objects.all()
#     serializer_class = MessageSerializer
#     parser_classes = (MultiPartParser, FormParser)  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã
#     permission_classes = [IsAuthenticated]  # –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º

#     def perform_create(self, serializer):
#         serializer.save(user=self.request.user)


    
# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@method_decorator(csrf_exempt, name='dispatch')
class RegisterView(generics.CreateAPIView):
    print("RegisterView@@@")
    queryset = User.objects.all()
    serializer_class = UserSerializer
    permission_classes = [AllowAny]

    def perform_create(self, serializer):
        email = serializer.validated_data.get("email")
        print(email, "email@@@")
        if not email:
            raise ValidationError({"email": "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."})  # –ü—Ä–æ–≤–µ—Ä—è–µ–º email –î–û —Å–æ–∑–¥–∞–Ω–∏—è user

        user = serializer.save(password=make_password(serializer.validated_data["password"]), is_active=False)
        print(user, "user@@@")
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
        verification_code = str(random.randint(100000, 999999))
        EmailVerificationCode.objects.create(user=user, code=verification_code)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
        send_verification_email.delay(email, verification_code)

        # try:
        #     send_mail(
        #             "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        #             f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {verification_code}",
        #             "lan888developer@gmail.com",  # –î–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å EMAIL_HOST_USER
        #             [user.email],
        #             fail_silently=False,
        #         )
        #     print(f"üì© –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user.email} —Å –∫–æ–¥–æ–º: {verification_code}")
        # except (BadHeaderError, SMTPException) as e:
        #     print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")
        #     return Response(
        #         {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã."},
        #         status=status.HTTP_500_INTERNAL_SERVER_ERROR,
        #     )
   

# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –ø–æ—á—Ç–µ
class VerifyEmailView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        print("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email:", request.data)  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º request.data

        email = request.data.get("email")
        code = request.data.get("code") 

        if not email or not code:  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –∏ code –ø–µ—Ä–µ–¥–∞–Ω—ã
            return Response({"error": "Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}, status=status.HTTP_400_BAD_REQUEST)

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_400_BAD_REQUEST)

        try:
            verification_code = EmailVerificationCode.objects.get(user=user, code=code)
        except EmailVerificationCode.DoesNotExist:
            return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"}, status=status.HTTP_400_BAD_REQUEST)
        
         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–æ–¥
        if verification_code.used:
            return Response({"error": "–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"}, status=status.HTTP_400_BAD_REQUEST)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥
        if verification_code.is_expired():
            return Response({"error":"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫"}, status=status.HTTP_400_BAD_REQUEST)

        # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π ‚Üí –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.is_active = True
        user.save()

           # –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        verification_code.used = True
        verification_code.save()



        # # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        # verification_code.delete()

        return Response({"message": "Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"}, status=status.HTTP_200_OK)
    
class ResendVerificationCodeView(APIView):
    """
    –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    permission_classes = [AllowAny]

    def post(self, request):
        email = request.data.get("email")
        
        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_400_BAD_REQUEST)
        
        new_code = str(random.randint(100000, 999999))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        code_obj, created = EmailVerificationCode.objects.update_or_create(
            user=user, defaults={"code": new_code}
        )

        send_verification_email.delay(email, new_code)

        # send_mail(
        #             "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        #             f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {new_code}",
        #             "lan888developer@gmail.com",  # –î–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å EMAIL_HOST_USER
        #             [email],
        #             fail_silently=False,
        #         )

        return Response({"message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ"}, status=status.HTTP_200_OK)
    
    

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JWT-—Ç–æ–∫–µ–Ω–æ–≤
class CustomTokenObtainPairView(TokenObtainPairView):

    serializer_class = CustomTokenObtainPairSerializer

    def post(self, request, *args, **kwargs):
        response = super().post(request, *args, **kwargs)
         # –ë–µ—Ä–µ–º `refresh` —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
        refresh_token = response.data.pop("refresh", None)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º `refresh` —Ç–æ–∫–µ–Ω –≤ `httpOnly` cookie
        if refresh_token:
            response.set_cookie(
                key="refresh_token",
                value=refresh_token,
                httponly=True,
                secure=settings.DEBUG is False,
                samesite="Lax",
                max_age=60 * 60 * 24 *7,
            )
        return response


class CustomTokenRefreshView(APIView):
    def post(self, request, *args, **kwargs):
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç `refresh_token` –∏–∑ httpOnly cookie –≤–º–µ—Å—Ç–æ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞.
        """
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç `access_token` –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç `refresh_token`.
        """
        refresh_token = request.COOKIES.get("refresh_token")

        if not refresh_token:
            raise AuthenticationFailed("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", code="unauthorized")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh_token
            token = RefreshToken(refresh_token)
            new_access_token = str(token.access_token)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π `refresh_token`
            new_refresh_token = str(RefreshToken())

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π `refresh_token` (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º blacklist)
            token.blacklist()

            # –û–±–Ω–æ–≤–ª—è–µ–º `refresh_token` –≤ `httpOnly-cookie`
            response = Response({"access": new_access_token})
            response.set_cookie(
                key="refresh_token",
                value=new_refresh_token,
                httponly=True,  # ‚úÖ –§—Ä–æ–Ω—Ç –Ω–µ –≤–∏–¥–∏—Ç –∫—É–∫—É
                secure=settings.DEBUG is False,
                samesite="Lax",  # ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
                max_age=60 * 60 * 24 * 7,  # 7 –¥–Ω–µ–π
            )

            return response
        except Exception:
            raise AuthenticationFailed("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω", code="invalid_token")



        # # –î–æ–±–∞–≤–ª—è–µ–º refresh —Ç–æ–∫–µ–Ω –≤ `request.data`
        # request.data["refresh"] = refresh_token
        # return super().post(request, *args, **kwargs)

        

     

class LogoutView(APIView):
    """
    –£–¥–∞–ª—è–µ—Ç refresh token –∏–∑ cookie –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ blacklist.
    """
    permission_classes = [IsAuthenticated]
    def post(self,request):
        refresh_token = request.COOKIES.get("refresh_token")

        if not refresh_token:
            return Response({"error": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}, status=status.HTTP_400_BAD_REQUEST)
        
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π refresh_token: {refresh_token}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        
        try:
            token = RefreshToken(refresh_token)
            token.blacklist() # –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ blacklisting: {str(e)}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            return Response({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞"}, status=status.HTTP_400_BAD_REQUEST )
        
        # –£–¥–∞–ª—è–µ–º refresh_token –∏–∑ cookie
        response = Response({"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω"})
        response.delete_cookie("refresh_token") # –£–¥–∞–ª—è–µ–º `refresh_token`
        return response
   
    

class DownloadImageView(APIView):
    permission_classes = [IsAuthenticated]  # –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

    def get(self, request, image_id):
        image = get_object_or_404(ImageModel, id=image_id)
        response = HttpResponse(image.file, content_type="image/jpeg")
        response["Content-Disposition"] = f'attachment; filename="{image.file.name}"'
        return response
    
class GetUserByUsernameView(APIView):
    permission_classes=[AllowAny]

    def get(self, request, username):
        try:
            user = User.objects.get(username=username)
            return Response({"email": user.email}, status=status.HTTP_200_OK)
        except User.DoesNotExist:
            return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)